{"version":3,"sources":["../../../src/bot/idos/index.js"],"names":["id","shift","pole","text","station","from","to","utcTimeAndDate","time","shiftedTimeAndDateUTC","sendIdosAnswer","sendNextIdos","getDataFromIdos","timeTravel","dateTravel","url","Promise","resolve","tabletojson","convertUrl","tablesAsJson","sender","stops","transformTextForIdos","encodeUrlParameter","initializePromise","then","result","data","errorIDOS","loadingIDOS","i","async","eachSeries","idosData","callback","length","err","Error","pom","splitInformation","push","extraInformation","split","toString","break","setTimeout","templates","zastavka","prijezd","odjezd","spoj","charAt","toLowerCase","val","isEven","message","message2","value","onlyConnections","replace","encodeURIComponent"],"mappings":"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","file":"index.js","sourcesContent":["import request from 'request-promise'\nimport async from 'async'\nimport tabletojson from 'tabletojson'\n\nimport { sendTextMessage, sendGenMessage, sendMultipleMessages } from '../lib/messages'\nimport { getTime, getDate, shiftTimeAndDateUTC } from '../lib/dateAndTime'\nimport { templates } from '../lib/templates'\nimport { loadingIDOS, errorIDOS } from '../lib/answers'\n\nimport { modifyUserById, getUserById } from '../../services/user'\n\nfunction getDataFromIdos(from, to, timeTravel, dateTravel){\n  let url = `https://jizdnirady.idnes.cz/praha/spojeni/?f=${from}&t=${to}&time=${timeTravel}&date=${dateTravel}&submit=true`\n\n  return new Promise( (resolve) => {\n        tabletojson.convertUrl(\n          url,\n          function(tablesAsJson) {\n            resolve(tablesAsJson[1])\n          }\n      )\n  })\n}\n\nexport function sendIdosAnswer(sender, text, utcTimeAndDate) {\n  const stops = transformTextForIdos(text)\n\n  let from = encodeUrlParameter(stops[0])\n  let to = encodeUrlParameter(stops[1])\n   \n  let timeTravel = getTime(utcTimeAndDate)\n  let dateTravel = getDate(utcTimeAndDate)\n   \n  const initializePromise = getDataFromIdos(from, to, timeTravel, dateTravel)\n  initializePromise.then((result) => {\n    let data = result ? result : null \n\n      if( data === null){\n        sendMultipleMessages(sender, errorIDOS)\n      } else {\n        sendMultipleMessages(sender, loadingIDOS)\n      }\n    let i = 0\n    \n    async.eachSeries(data, (idosData, callback) => {\n      if (i === data.length - 1) {\n        // Break out of async\n        var err = new Error('Broke out of async')\n        const pom = data.length\n        const splitInformation = []\n        splitInformation.push(data[pom-1])\n\n        let extraInformation = splitInformation[0]['Odkud/Přestup/Kam'].split(\",\",1).toString()\n\n        err.break = true\n\n        setTimeout(()=>{sendTextMessage(sender, extraInformation)}, 500)\n        setTimeout(()=>{sendGenMessage(sender, templates['get_next_idos'])}, 700)\n        setTimeout(()=>{modifyUserById(sender, stops[0], stops[1], utcTimeAndDate)}, 900)\n\n        return callback(err)\n        }\n\n      setTimeout(() => {\n        let zastavka = idosData['Odkud/Přestup/Kam']\n        let prijezd = idosData['Příj.']\n        let odjezd  = idosData['Odj.']\n        let spoj = idosData['6']\n\n        if (odjezd.length === 0 || odjezd.length === 1){ odjezd = 'příjezd'; }\n        if (prijezd.length === 0 || prijezd.length === 1){ prijezd = 'odjezd'; }\n        if (spoj.length === 3){\n          spoj = ', autobusem č. ' + spoj\n        }\n          \n        if (spoj === 'A' || spoj === 'B' || spoj === 'C'){\n          spoj = ', metro ' + spoj\n        }\n          \n        if(spoj.length === 2 || spoj.length === 1){\n          spoj = ', tramvají č. ' + spoj\n        }\n          \n        if(spoj.charAt(0) === 'P'){\n          spoj = ', ' + spoj.toLowerCase()\n        }\n          \n        let val = isEven(i);\n          \n        if (val === false){\n          let message = zastavka + ' ' + odjezd + ' ' + prijezd + spoj \n          sendTextMessage(sender, message)\n        } else {\n          let message2 = zastavka + ' ' + prijezd + ' ' + odjezd + spoj \n          sendTextMessage(sender, message2)\n        }\n\n        i++\n        callback()\n        }, 800)\n      })\n    })\n}\n\nfunction isEven(value) {\n  if (value%2 == 0){\n    return true\n  }else {\n    return false\n  }\n}\n\nfunction transformTextForIdos(text){\n  const onlyConnections = text.replace(\"spoj \", \"\")\n  const stops = onlyConnections.split(\" do \")\n\n  return stops\n}\n\nfunction encodeUrlParameter(value) {\n\treturn encodeURIComponent(value)\n  \t.replace(/\\%20/g, '+')\n}\n\nexport async function sendNextIdos(id, shift){\n  const pole = await getUserById(id)\n\n  if(pole){\n    let text = 'spoj ' + pole[0].station.from + ' do ' + pole[0].station.to\n    \n    let utcTimeAndDate = pole[0].station.time\n\n    let shiftedTimeAndDateUTC = shiftTimeAndDateUTC(utcTimeAndDate, shift)\n\n    return sendIdosAnswer(id, text, shiftedTimeAndDateUTC)\n  }else {\n    sendTextMessage(id, \"Něco se pokazilo zkus to znovu :-(\")\n  }\n}"]}