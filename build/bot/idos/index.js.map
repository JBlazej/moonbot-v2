{"version":3,"sources":["../../../src/bot/idos/index.js"],"names":["id","pole","text","station","from","to","utcTimeAndDate","time","shiftedTimeAndDateUTC","sendIdosAnswer","sendNextIdos","initializeIdosTable","timeTravel","dateTravel","url","result","Promise","resolve","reject","then","html","parseHtml","cheerio","load","decodeEntities","normalizeWhitespace","data","attr","first","parsetable","j","length","parseTable","i","push","catch","err","sender","stops","transformTextForIdos","encodeUrlParameter","initializePromise","async","eachSeries","idosData","callback","Error","pom","splitInformation","extraInformation","split","toString","break","setTimeout","templates","zastavka","prijezd","odjezd","spoj","charAt","toLowerCase","val","isEven","message","message2","value","onlyConnections","replace","encodeURIComponent"],"mappings":"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","file":"index.js","sourcesContent":["import request from 'request-promise'\nimport async from 'async'\nimport cheerio from 'cheerio'\nimport cheerioTableparser from 'cheerio-tableparser'\n\nimport {sendTextMessage, sendGenMessage, sendMultipleMessages} from '../lib/messages'\nimport {getTime, getDate, shiftTimeAndDateUTC} from '../lib/dateAndTime'\n\nimport {templates} from '../lib/templates'\n\nimport {modifyUserById, getUserById} from '../../models/v1/user'\n\n\nexport function initializeIdosTable(from, to, timeTravel, dateTravel){\n    let url = `https://jizdnirady.idnes.cz/praha/spojeni/?f=${from}&t=${to}&time=${timeTravel}&date=${dateTravel}&submit=true`\n    let result = []\n  \n    return new Promise( (resolve, reject) => {\n      request(url).then((html) => {\n        const parseHtml = cheerio.load(html, { decodeEntities: false, normalizeWhitespace: true })\n        cheerioTableparser(parseHtml)\n  \n        // Parse data from Idos\n        const data = parseHtml('table tbody').attr('class', 'results').first().parsetable(true, true, true)\n        // 6 columns in 1 row\n\n        for ( var j = 0; j < data[2].length; j++ ){\n          const parseTable = []\n  \n          for( var i = 2; i < data.length ; i++ ){\n            parseTable.push(data[i][j])\n          }\n  \n          result.push(parseTable)\n        }\n\n        resolve(result)\n      }).catch((err) => reject(err))\n    })\n  }\n\n export function sendIdosAnswer(sender, text, utcTimeAndDate) {\n   const stops = transformTextForIdos(text)\n\n   let from = encodeUrlParameter(stops[0])\n   let to = encodeUrlParameter(stops[1])\n   \n   let timeTravel = getTime(utcTimeAndDate)\n   let dateTravel = getDate(utcTimeAndDate)\n\n   sendTextMessage(sender, \"Váš spoj se vyhledává...\")\n   \n   const initializePromise = initializeIdosTable(from, to, timeTravel, dateTravel)\n    initializePromise.then( (result) => {\n        // Initialized table data\n        const data = result\n  \n        let i = 0\n  \n        async.eachSeries(data, function(idosData, callback) {\n  \n          if (i === data.length - 1) {\n          // Break out of async\n          var err = new Error('Broke out of async')\n          const pom = data.length\n          const splitInformation = []\n          splitInformation.push(data[pom-1])\n  \n          let extraInformation = splitInformation[0][0].split(\",\",3).toString()\n          extraInformation += \" Kč\"\n  \n          err.break = true\n  \n          \n          setTimeout(()=>{sendTextMessage(sender, extraInformation)}, 500)\n          setTimeout(()=>{sendGenMessage(sender, templates['get_test'])}, 700)\n          setTimeout(()=>{modifyUserById(sender, stops[0], stops[1], utcTimeAndDate)}, 900)\n\n          return callback(err)\n          }\n  \n          setTimeout(() => {\n            let zastavka = idosData[0]\n            let prijezd = idosData[1]\n            let odjezd  = idosData[2]\n            let spoj = idosData[5]\n  \n  \n            if (odjezd.length === 0 || odjezd.length === 1){ odjezd = 'příjezd'; }\n            if (prijezd.length === 0 || prijezd.length === 1){ prijezd = 'odjezd'; }\n            if (spoj.length === 3){\n  \n               spoj = ', autobusem č. ' + spoj\n  \n  \n             }\n  \n             if (spoj === 'A' || spoj === 'B' || spoj === 'C'){\n               spoj = ', metro ' + spoj\n  \n             }\n  \n             if(spoj.length === 2 || spoj.length === 1){\n               spoj = ', tramvají č. ' + spoj\n  \n  \n             }\n  \n             if(spoj.charAt(0) === 'P'){\n               spoj = ', ' + spoj.toLowerCase()\n             }\n  \n            let val = isEven(i);\n  \n            if (val === false){\n              let message = zastavka + ' ' + odjezd + ' ' + prijezd + spoj \n              sendTextMessage(sender, message)\n  \n            } else {\n              let message2 = zastavka + ' ' + prijezd + ' ' + odjezd + spoj \n              sendTextMessage(sender, message2)\n  \n            }\n\n            i++\n\n            callback()\n          }, 800)\n        })\n      }, (err) => {\n        const text = ['Něco se pokazilo. :-(','Příkaz je ve tvaru: Spoj odkud do kam']\n        sendMultipleMessages(sender, text)\n    })\n  }\n  \nfunction isEven(value) {\n  if (value%2 == 0){\n    return true\n  }else {\n    return false\n  }\n}\n\nfunction transformTextForIdos(text){\n  const onlyConnections = text.replace(\"spoj \", \"\")\n  const stops = onlyConnections.split(\" do \")\n\n  return stops\n}\n\nfunction encodeUrlParameter(value) {\n\treturn encodeURIComponent(value)\n  \t.replace(/\\%20/g, '+')\n}\n\nexport async function sendNextIdos(id){\n  const pole = await getUserById(id)\n\n  if(pole){\n    let text = 'spoj ' + pole[0].station.from + ' do ' + pole[0].station.to\n    \n    let utcTimeAndDate = pole[0].station.time\n    let shiftedTimeAndDateUTC = shiftTimeAndDateUTC(utcTimeAndDate)\n\n    return sendIdosAnswer(id, text, shiftedTimeAndDateUTC)\n  }else {\n    sendTextMessage(id, \"Něco se pokazilo zkus to znovu :-(\")\n  }\n}\n"]}