{"version":3,"sources":["../../../src/models/v1/user.js"],"names":["model","UserSchema","find","user","getUserAll","id","getUserById","from","to","utcTimeAndDate","data","station","time","console","log","findOneAndUpdate","new","modifyUserById","User","save","createNewUser","mongoose","Schema","type","String","unique","lowercase","required","created","Date","default","now","hacker","Boolean"],"mappings":";;;;;;;;uEAoCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACgB,eAAQA,KAAR,CAAc,MAAd,EAAsBC,UAAtB,EAAkCC,IAAlC,CAAuC,EAAvC,CADhB;;AAAA;AACGC,4BADH;AAAA,yDAGIA,IAHJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,U;;;;;;wEAMf,kBAA4BC,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACgB,eAAQL,KAAR,CAAc,MAAd,EAAsBC,UAAtB,EAAkCC,IAAlC,CAAuC,EAAC,MAAMG,EAAP,EAAvC,CADhB;;AAAA;AACGF,4BADH;AAAA,0DAGIA,IAHJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeG,W;;;;;;wEAMf,kBAA+BD,EAA/B,EAAmCE,IAAnC,EAAyCC,EAAzC,EAA6CC,cAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAECC,4BAFD,GAEQ;AACPC,qCAAS;AACLJ,sCAAMA,IADD;AAELC,oCAAIA,EAFC;AAGLI,sCAAMH;AAHD;AADF,yBAFR;;AASHI,gCAAQC,GAAR,CAAYJ,IAAZ;;AATG;AAAA,+BAWgB,eAAQV,KAAR,CAAc,MAAd,EAAsBC,UAAtB,EAAkCc,gBAAlC,CAAmD,EAACV,IAAIA,EAAL,EAAnD,EAA6DK,IAA7D,EAAmE,EAACM,KAAK,IAAN,EAAnE,CAXhB;;AAAA;AAWGb,4BAXH;AAAA,0DAaIA,IAbJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAec,c;;;;;;wEAgBf,kBAA8BZ,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACgB,eAAQL,KAAR,CAAc,MAAd,EAAsBC,UAAtB,CADhB;;AAAA;AACGiB,4BADH;AAEGf,4BAFH,GAEU,IAAIe,IAAJ,CAAS,EAACb,IAAIA,EAAL,EAAT,CAFV;;AAGHF,6BAAKgB,IAAL;;AAHG,0DAKIhB,IALJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeiB,a;;;;;AAhEtB;;;;AACA;;;;;;AAEA;AACA;AACA,IAAMnB,aAAa,IAAIoB,mBAASC,MAAb,CAAoB;AACrCjB,QAAI;AACFkB,cAAMC,MADJ;AAEFC,gBAAQ,IAFN;AAGFC,mBAAW,IAHT;AAIFC,kBAAU;AAJR,KADiC;AAOrCC,aAAS;AACPL,cAAMM,IADC;AAEPC,iBAASD,KAAKE;AAFP,KAP4B;AAWrCpB,aAAS;AACLJ,cAAM;AACFgB,kBAAMC,MADJ;AAEFM,qBAAS;AAFP,SADD;AAKLtB,YAAI;AACAe,kBAAMC,MADN;AAEAM,qBAAS;AAFT,SALC;AASLlB,cAAM;AACFW,kBAAMM,IADJ;AAEFC,qBAASD,KAAKE;AAFZ;AATD,KAX4B;AAyBrCC,YAAQ;AACJT,cAAMU,OADF;AAEJH,iBAAS;AAFL;AAzB6B,CAApB,CAAnB","file":"user.js","sourcesContent":["import mongoose from 'mongoose'\nimport {getDB} from '..'\n\n// USERS SCHEMA\n// -----------------------------------------------------------------------------\nconst UserSchema = new mongoose.Schema({\n  id: {\n    type: String,\n    unique: true,\n    lowercase: true,\n    required: true\n  },\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  station: {\n      from: {\n          type: String,\n          default: 'volha'\n      },\n      to: {\n          type: String,\n          default: 'husinecka'\n      },\n      time: {\n          type: Date,\n          default: Date.now\n      }\n  },\n  hacker: {\n      type: Boolean,\n      default: false\n  }\n})\n\nexport async function getUserAll () {\n    const user = await getDB().model('User', UserSchema).find({})\n\n    return user\n}\n\nexport async function getUserById (id) {\n    const user = await getDB().model('User', UserSchema).find({\"id\": id})\n    \n    return user\n  }\n\nexport async function modifyUserById (id, from, to, utcTimeAndDate) {\n    \n    let data = {\n        station: {\n            from: from,\n            to: to,\n            time: utcTimeAndDate\n        }\n    }\n    console.log(data)\n\n    const user = await getDB().model('User', UserSchema).findOneAndUpdate({id: id}, data, {new: true})\n    \n    return user\n}\n\nexport async function createNewUser (id) {\n    const User = await getDB().model('User', UserSchema)\n    const user = new User({id: id})\n    user.save()\n\n    return user\n}"]}