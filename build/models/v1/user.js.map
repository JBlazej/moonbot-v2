{"version":3,"sources":["../../../src/models/v1/user.js"],"names":["model","UserSchema","find","user","getUserAll","id","getUserById","from","to","utcTimeAndDate","data","station","time","findOneAndUpdate","new","modifyUserById","updateUserById","User","help","console","log","length","save","createNewUser","mongoose","Schema","type","String","unique","lowercase","required","created","Date","default","now","hacker","Boolean"],"mappings":"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","file":"user.js","sourcesContent":["import mongoose from 'mongoose'\nimport {getDB} from '..'\n\n// USERS SCHEMA\n// -----------------------------------------------------------------------------\nconst UserSchema = new mongoose.Schema({\n  id: {\n    type: String,\n    unique: true,\n    lowercase: true,\n    required: true\n  },\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  station: {\n      from: {\n          type: String,\n          default: 'volha'\n      },\n      to: {\n          type: String,\n          default: 'husinecka'\n      },\n      time: {\n          type: Date,\n          default: Date.now\n      }\n  },\n  hacker: {\n      type: Boolean,\n      default: false\n  }\n})\n\nexport async function getUserAll () {\n    const user = await getDB().model('User', UserSchema).find({})\n\n    return user\n}\n\nexport async function getUserById (id) {\n    const user = await getDB().model('User', UserSchema).find({\"id\": id})\n    \n    return user\n  }\n\nexport async function modifyUserById (id, from, to, utcTimeAndDate) {\n    let data = {\n        station: {\n            from: from,\n            to: to,\n            time: utcTimeAndDate\n        }\n    }\n\n    const user = await getDB().model('User', UserSchema).findOneAndUpdate({id: id}, data, {new: true})\n    \n    return user\n}\n\nexport async function updateUserById (id) {\n    let data = {\n        id: id\n    }\n\n    const user = await getDB().model('User', UserSchema).findOneAndUpdate({id: id}, data, {new: true})\n    \n    return user\n}\n\nexport async function createNewUser (id) {\n    const User = await getDB().model('User', UserSchema)\n    const user = new User({id: id})\n\n    const help = await getUserById(id)\n    console.log(help.length)\n\n    if(help.length === 0) {\n        user.save()\n        return user\n    } else {\n        updateUserById(id)\n    }\n}"]}